
// MusicTest_1.cpp : 定义应用程序的类行为。
//

#include "stdafx.h"
#include "MusicTest_1.h"
#include "MusicTest_1Dlg.h"


#include "mmsystem.h"
#include "Digitalv.h"
#pragma comment(lib,"winmm")


#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// CMusicTest_1App

BEGIN_MESSAGE_MAP(CMusicTest_1App, CWinApp)
	ON_COMMAND(ID_HELP, &CWinApp::OnHelp)
END_MESSAGE_MAP()


// CMusicTest_1App 构造

CMusicTest_1App::CMusicTest_1App()
{
	// 支持重新启动管理器
	m_dwRestartManagerSupportFlags = AFX_RESTART_MANAGER_SUPPORT_RESTART;

	// TODO:  在此处添加构造代码，
	// 将所有重要的初始化放置在 InitInstance 中
}


// 唯一的一个 CMusicTest_1App 对象

CMusicTest_1App theApp;


// CMusicTest_1App 初始化

BOOL CMusicTest_1App::InitInstance()
{
	// 如果一个运行在 Windows XP 上的应用程序清单指定要
	// 使用 ComCtl32.dll 版本 6 或更高版本来启用可视化方式，
	//则需要 InitCommonControlsEx()。  否则，将无法创建窗口。
	INITCOMMONCONTROLSEX InitCtrls;
	InitCtrls.dwSize = sizeof(InitCtrls);
	// 将它设置为包括所有要在应用程序中使用的
	// 公共控件类。
	InitCtrls.dwICC = ICC_WIN95_CLASSES;
	InitCommonControlsEx(&InitCtrls);

	CWinApp::InitInstance();


	AfxEnableControlContainer();

	// 创建 shell 管理器，以防对话框包含
	// 任何 shell 树视图控件或 shell 列表视图控件。
	CShellManager *pShellManager = new CShellManager;

	// 激活“Windows Native”视觉管理器，以便在 MFC 控件中启用主题
	CMFCVisualManager::SetDefaultManager(RUNTIME_CLASS(CMFCVisualManagerWindows));

	// 标准初始化
	// 如果未使用这些功能并希望减小
	// 最终可执行文件的大小，则应移除下列
	// 不需要的特定初始化例程
	// 更改用于存储设置的注册表项
	// TODO:  应适当修改该字符串，
	// 例如修改为公司或组织名
	SetRegistryKey(_T("应用程序向导生成的本地应用程序"));

	CMusicTest_1Dlg dlg;
	m_pMainWnd = &dlg;
	INT_PTR nResponse = dlg.DoModal();
	if (nResponse == IDOK)
	{
		// TODO:  在此放置处理何时用
		//  “确定”来关闭对话框的代码


		LPWSTR   buf = NULL;
		//use   mciSendString()   
		//mciSendString("play   e:\\songs\\把根留住.mp3",buf,sizeof(buf),NULL);   
		//mciSendString("play   e:\\songs\\zhj.mp3",buf,sizeof(buf),NULL);   
		//char   str[128]   =   {0};   
		//int   i   =   0;   

		//use   mciSendCommand   
		MCI_OPEN_PARMS   mciOpen;
		MCIERROR   mciError;
		//mciOpen.lpstrDeviceType   =   (LPCTSTR)MCI_ALL_DEVICE_ID;   
		//mciOpen.lpstrDeviceType   =   "waveaudio";   //只能播放.wav文件   
		//mciOpen.lpstrDeviceType   =   "avivideo";     //*.avi   
		mciOpen.lpstrDeviceType = _T("mpegvideo");
		//mciOpen.lpstrDeviceType   =   "sequencer";   
		mciOpen.lpstrElementName = _T(".\\res\\MusicTest_1.mp3");
		//mciOpen.lpstrElementName   =   "e:\\movie\\first.avi";   
		//mciOpen.lpstrElementName   =   "c:\\winnt\\media\\Windows   登录音.wav";   
		mciError = mciSendCommand(0, MCI_OPEN, MCI_OPEN_TYPE | MCI_OPEN_ELEMENT, (DWORD)&mciOpen);
		if (mciError)
		{
			mciGetErrorString(mciError, buf, 128);
			MessageBox(NULL, _T("send MCI_PLAY command failed"), _T("ERROR"), MB_OK);
		}
		UINT   DeviceID = mciOpen.wDeviceID;
		MCI_PLAY_PARMS   mciPlay;

		//mciError   =   mciSendCommand(DeviceID,MCI_PLAY,0   ,(DWORD)&mciPlay);  
		//MCI_FROM | MCI_TO | 
		mciError = mciSendCommand(DeviceID, MCI_PLAY, MCI_WAIT | MCI_DGV_PLAY_REPEAT, (DWORD)(LPMCI_PLAY_PARMS)&mciPlay);  //MCI_DGV_PLAY_REPEAT, 要 #include "Digitalv.h",且要在#include "mmsystem.h"之后，否则报错
		if (mciError)
		{
			mciGetErrorString(mciError, buf, 128);
			MessageBox(NULL, _T("send MCI_PLAY command failed"), _T("ERROR"), MB_OK);
		}

	}
	else if (nResponse == IDCANCEL)
	{
		// TODO:  在此放置处理何时用
		//  “取消”来关闭对话框的代码
	}
	else if (nResponse == -1)
	{
		TRACE(traceAppMsg, 0, "警告: 对话框创建失败，应用程序将意外终止。\n");
		TRACE(traceAppMsg, 0, "警告: 如果您在对话框上使用 MFC 控件，则无法 #define _AFX_NO_MFC_CONTROLS_IN_DIALOGS。\n");
	}

	// 删除上面创建的 shell 管理器。
	if (pShellManager != NULL)
	{
		delete pShellManager;
	}

	// 由于对话框已关闭，所以将返回 FALSE 以便退出应用程序，
	//  而不是启动应用程序的消息泵。
	return FALSE;
}

